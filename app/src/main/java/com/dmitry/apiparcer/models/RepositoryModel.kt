package com.dmitry.apiparcer.models

import com.dmitry.apiparcer.json.RepositoryJson
import com.dmitry.apiparcer.withoutShaArg
import com.dmitry.apiparcer.withoutTopDomain

data class RepositoryModel(
    val archiveUrl: String,
    val assigneesUrl: String,
    val blobsUrl: String,
    val branchesUrl: String,
    val collaboratorsUrl: String,
    val commentsUrl: String,
    val commitsUrl: String,
    val compareUrl: String,
    val contentsUrl: String,
    val contributorsUrl: String,
    val deploymentsUrl: String,
    val description: String,
    val downloadsUrl: String,
    val eventsUrl: String,
    val fork: Boolean,
    val forksUrl: String,
    val fullName: String,
    val gitCommitsUrl: String,
    val gitRefsUrl: String,
    val gitTagsUrl: String,
    val gitUrl: String,
    val htmlUrl: String,
    val id: Int,
    val issueCommentUrl: String,
    val issueEventsUrl: String,
    val issuesUrl: String,
    val keysUrl: String,
    val labelsUrl: String,
    val languagesUrl: String,
    val mergesUrl: String,
    val milestonesUrl: String,
    val name: String,
    val nodeId: String,
    val notificationsUrl: String,
    val owner: OwnerModel,
    val isPrivate: Boolean,
    val pullsUrl: String,
    val releasesUrl: String,
    val sshUrl: String,
    val stargazersUrl: String,
    val statusesUrl: String,
    val subscribersUrl: String,
    val subscriptionUrl: String,
    val tagsUrl: String,
    val teamsUrl: String,
    val treesUrl: String,
    val url: String
) {
    constructor(repositoryJson: RepositoryJson) : this(
        archiveUrl = repositoryJson.archiveUrl,
        assigneesUrl = repositoryJson.assigneesUrl,
        blobsUrl = repositoryJson.blobsUrl,
        branchesUrl = repositoryJson.branchesUrl,
        collaboratorsUrl = repositoryJson.collaboratorsUrl,
        commentsUrl = repositoryJson.commentsUrl,
        commitsUrl = repositoryJson.commitsUrl.withoutShaArg.withoutTopDomain,
        compareUrl = repositoryJson.compareUrl,
        contentsUrl = repositoryJson.contentsUrl,
        contributorsUrl = repositoryJson.contributorsUrl,
        deploymentsUrl = repositoryJson.deploymentsUrl,
        description = repositoryJson.description ?: "",
        downloadsUrl = repositoryJson.downloadsUrl,
        eventsUrl = repositoryJson.eventsUrl,
        fork = repositoryJson.fork,
        forksUrl = repositoryJson.forksUrl.withoutTopDomain,
        fullName = repositoryJson.fullName,
        gitCommitsUrl = repositoryJson.gitCommitsUrl.withoutShaArg.withoutTopDomain,
        gitRefsUrl = repositoryJson.gitRefsUrl,
        gitTagsUrl = repositoryJson.gitTagsUrl,
        gitUrl = repositoryJson.gitUrl ?: "",
        htmlUrl = repositoryJson.htmlUrl,
        id = repositoryJson.id,
        issueCommentUrl = repositoryJson.issueCommentUrl,
        issueEventsUrl = repositoryJson.issueEventsUrl,
        issuesUrl = repositoryJson.issuesUrl,
        keysUrl = repositoryJson.keysUrl,
        labelsUrl = repositoryJson.labelsUrl,
        languagesUrl = repositoryJson.languagesUrl.withoutTopDomain,
        mergesUrl = repositoryJson.mergesUrl,
        milestonesUrl = repositoryJson.milestonesUrl,
        name = repositoryJson.name,
        nodeId = repositoryJson.nodeId,
        notificationsUrl = repositoryJson.notificationsUrl,
        owner = OwnerModel(repositoryJson.owner), //need replace with idOwner
        isPrivate = repositoryJson.isPrivate,
        pullsUrl = repositoryJson.pullsUrl,
        releasesUrl = repositoryJson.releasesUrl,
        sshUrl = repositoryJson.sshUrl ?: "",
        stargazersUrl = repositoryJson.stargazersUrl.withoutTopDomain,
        statusesUrl = repositoryJson.statusesUrl,
        subscribersUrl = repositoryJson.subscribersUrl,
        subscriptionUrl = repositoryJson.subscriptionUrl,
        tagsUrl = repositoryJson.tagsUrl,
        teamsUrl = repositoryJson.teamsUrl,
        treesUrl = repositoryJson.treesUrl,
        url = repositoryJson.url

    )
}

